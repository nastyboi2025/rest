What is REST?
------------

Representational State Transfer.

Its NOT a standard. Its more guidelines.

Architectural style for designing distributed systems.
Not tied to HTTP but associated most commonly with it.

Used in API design. Access to endpoints.


Rest was built with the pains of SOAP
Built on principles of HTTP (Using the verbs GET POST DELETE PUT)

Services can return:
XML, JSON, HTML, Plain text and Binary/Octet- which are images/pdf etc.



RESTful URLS
------------

These are always centred around nouns and never verbs.
	https://localhost:8080/car-rental/cars

cars are the nouns - here u'd expect a collection of cars to be returned.

Verbs are expressed thru protocol (GET POST DELETE PUT)

Path is used to get a specific instance.
	https://localhost:80808/car-rental/reservations/1234

 - the 1234 reservation will be returned



Architecture
------------

Richardson Maturity Model - defines how RESTful your app is.

pyramid structure with 4 levels


	Restful
	Level 3: Hypermedia Controls (what to do with reurned info ie HATEOS)
	Level 2: HTTP verbs (use of the verbs, http response codes used)
	Level 1: Resources (multiple endpoints and urls, rest-like but focused on objects)
	Level 0: POX (sending plain old xml over http. one endpoint)


Once you reach Level 3 you are really and truly RESTful.


Level 2 focuses on HTTP Verbs
CRUD operations
Post Get Put Delete (web hardly uses Put/Delete)

Level 3 includes Level 2 but puts a focus on Discoverability
	HATEOS (HyperMedia As The Engine Of Application State)
	Client interacts with the server thru hypermedia
	Concept is to decouple client and server allowing them to evolve
		Interactions begin with a fixed URL
		Future interactions are determined by the server
	Concepts of HATEOAS are to help promote long term design

REST Principles
---------------

There is a request and a response
Resources are all named through URLs
Resources provide links to other resources
There is a standard interface into the app using one of the HTTP methods


CRUD FUNCTIONS
--------------

Modifying info in the database world.
Level 2 of RMM is do with mapping crud functions with their appropriate HTTP
equivalents.
Create = POST
Read = GET
Update = PUT
Delete = DELETE

Sometimes people use POST for Create and Update.


JSON
----

JavaScript object Notation.
Pronounced jason
Preferred when working with JS clients
Looser way to represent data
Flexible and easy to work with
Preferred over XML

However difficult to validate so XML wins on that front - but only that front.

XML
---

Been around for ages
Often associated with SOAP
Still ok to use with REST
Easily to validate


BINARY
------
Not an alternative to JSON or XML
Used to serve objects such as files, images, pdfs

	

Get Method
---------
Used to retrieve data









